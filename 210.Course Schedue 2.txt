 public int[] findOrder(int numCourses, int[][] prerequisites){
        HashMap<Integer,List<Integer>> maps = new HashMap<>();
        int[] indegree = new int[numCourses];
        int len = prerequisites.length;
        List<Integer> res = new LinkedList<>();
        int[] ress = new int[numCourses];
        if(len<=0){
            for(int i=0;i<numCourses;i++){
                ress[i] = i;
            }
            return ress;
        }
        for(int i = 0;i < len;i++){
            int first = prerequisites[i][0];
            int second = prerequisites[i][1];
            if(!maps.containsKey(first)){
                maps.put(first,new LinkedList<>());
            }
            maps.get(first).add(second);
            indegree[second]++;
        }
        Queue<Integer> queue = new ArrayDeque<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0)
                queue.add(i);
        }
        while(queue.size()>0){
            int val = queue.poll();
            res.add(val);
            indegree[val] = -1;
            if(!maps.containsKey(val)) {
                continue;
            }
            List<Integer> temp = maps.get(val);
            for(int i=0;i<temp.size();i++){
                int index = temp.get(i);
                indegree[index]--;
                if(indegree[index]==0)
                    queue.add(index);
            }
        }
        for(int i=0;i<numCourses;i++){
            if(indegree[i]!=-1)
                return new int[0];
        }

        int j = 0;
        for(int i=numCourses-1;i>=0;i--){
            ress[j++] = res.get(i);
        }
        return ress;
    }