public List<List<Integer>> permute3(int[] nums) {
	    List<List<Integer>> list = new ArrayList<>();
	    Arrays.sort(nums);
	    boolean[] indicates = new boolean[nums.length];
	    backTrack3(list, new ArrayList<Integer>(), nums,indicates);
	    return list;
	}
	public List<List<Integer>> permute(int[] nums) {
	    List<List<Integer>> list = new ArrayList<>();
	    Arrays.sort(nums);
	    backTrack(list, new ArrayList<Integer>(), nums);
	    return list;
	}
	private void backTrack(List<List<Integer>> list,List<Integer>cur, int[] nums ){
		if(cur.size() == nums.length){
			list.add(new ArrayList<Integer>(cur));
		}
		else{
			for(int i = 0;i < nums.length; i++){
				if(cur.contains(nums[i])) continue;
				else{
					cur.add(nums[i]);
					backTrack(list, cur, nums);
					cur.remove(cur.size()-1);				
				}
			}
		}
	}
	private void backTrack3(List<List<Integer>> list,List<Integer>cur, int[] nums ,boolean[] indicates){
		if(cur.size() == nums.length){
			list.add(new ArrayList<Integer>(cur));
		}
		else{
			for(int i = 0;i < nums.length; i++){
				if(indicates[i]) continue;
				else{
					cur.add(nums[i]);
					indicates[i] = true;
					backTrack(list, cur, nums);
					indicates[i] = false;
					cur.remove(cur.size()-1);				
				}
			}
		}
	}