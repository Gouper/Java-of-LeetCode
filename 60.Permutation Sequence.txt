public String getPermutation(int n, int k){
        List<List<Integer>> list = new ArrayList<>();
        String result="";
        help(list, new ArrayList<Integer>(),n,k);
        List<Integer> ss = list.get(list.size()-1);
        for(int i =0;i<ss.size();i++){
            result += ss.get(i);
        }
        return result;
    }
    private void help(List<List<Integer>> list, List<Integer> cur,int n,int k){
	    if(cur.size() == n) list.add(new ArrayList<>(cur));
	    if(list.size()==k) return;
	    for(int i =1;i<=n;i++){
	        if(cur.contains(i)) continue;
	        else{
	            cur.add(i);
	            help(list,cur,n,k);
	            cur.remove(cur.size()-1);
            }
        }
    }
    public String getPermutation2(int n, int k) {
        int[] factor = new int[n+1];
        List<Integer> list = new ArrayList<Integer>();
        StringBuilder sb = new StringBuilder();
        int index = 0;
        factor[0] = 1;
        for(int i = 1;i<=n;i++){
            factor[i] = factor[i-1] * i;
        }
        for(int i = 1;i<=n;i++){
            list.add(i);
        }

        k--;
        for(int i = 1;i<=n;i++){
            index = k/factor[n-i];
            sb.append(String.valueOf(list.get(index)));
            list.remove(index);
            k = k - index*factor[n-i];
        }
        return String.valueOf(sb);
    }