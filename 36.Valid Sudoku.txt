public boolean isValidSodoku(char[][] board){
		Set<Character> set = new HashSet<Character>(); 
		int row=9,col = 9;
		int i,j;
		for(i=0;i<row;i++){
			for(j=0;j<col;j++){
				if(board[i][j]=='.')continue;
				if(!set.add(board[i][j]))return false;
			}
			set.clear();
		}
		for(i=0;i<row;i++){
			for(j=0;j<col;j++){
				if(board[j][i]=='.')continue;
				if(!set.add(board[j][i]))return false;
			}
			set.clear();
		}
		int p,q;
		for(p=0;p<3;p++){
			for(q=0;q<3;q++){
				for(i=0+p*3;i<3+p*3;i++){
					for(j=0+q*3;j<3+q*3;j++){
						if(board[i][j]=='.')continue;
						if(!set.add(board[i][j]))return false;
					}
				}
				set.clear();
			}
		}
		
		return true;
	}
	 public boolean isValidSudoku2(char[][] board) {
	        for(int i = 0; i<9; i++){
	        HashSet<Character> rows = new HashSet<Character>();
	        HashSet<Character> columns = new HashSet<Character>();
	        HashSet<Character> cube = new HashSet<Character>();
	        for (int j = 0; j < 9;j++){
	            if(board[i][j]!='.' && !rows.add(board[i][j]))
	                return false;
	            if(board[j][i]!='.' && !columns.add(board[j][i]))
	                return false;
	            int RowIndex = 3*(i/3);
	            int ColIndex = 3*(i%3);
	            if(board[RowIndex + j/3][ColIndex + j%3]!='.' && !cube.add(board[RowIndex + j/3][ColIndex + j%3]))
	                return false;
	        }
	    }
	    return true;
	    }