public void solve(char[][] board){
        if(board==null||board.length<3||board[0].length<3)return;
        int row = board.length;
        int col = board[0].length;
        for(int i=0;i<col;i++){
            fill(board,0,i);
            fill(board,row-1,i);
        }
        for(int i=0;i<row;i++){
            fill(board,i,0);
            fill(board,i,col-1);
        }
        for(int i = 0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='O')
                    board[i][j] = 'X';
                else if(board[i][j]=='#')
                    board[i][j] = 'O';
            }
        }
    }
    private void fill(char[][] board, int i, int j){
        if(board[i][j]!='O') return;
        board[i][j] = '#';
        LinkedList<Integer> queue = new LinkedList<>();
        int code = i*board[0].length+j;
        queue.offer(code);
        while(!queue.isEmpty()){
            code = queue.poll();
            int row = code/board[0].length;
            int col = code%board[0].length;
            if(row>0&&board[row-1][col]=='O'){
                board[row-1][col]='#';
                queue.offer((row-1)*board[0].length+col);
            }
            if(row+1<board.length&&board[row+1][col]=='O'){
                board[row+1][col] = '#';
                queue.offer((row+1)*board[0].length+col);
            }
            if(col>0&&board[row][col-1]=='O'){
                board[row][col-1] = '#';
                queue.offer(row*board[0].length + col - 1);
            }
            if(col+1<board[0].length&&board[row][col+1]=='O'){
                board[row][col+1] = '#';
                queue.offer(row*board[0].length + col + 1);
            }
        }
    }
    }